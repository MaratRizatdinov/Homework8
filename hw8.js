// console.log('Задание 1');

// // Задание 1

// // Написать функцию, которая на вход принимает массив чисел и callback-функцию.
// // Функция должна возвращать целое число, в зависимости от callback это может
// // быть сумма всех чисел массива, произведение. 
// // Функции, вычисляющие произведение и сумму чисел массива, 
// // также необходимо реализовать.

// // Коллбэк для суммирования элементов массива

// let arrSum = (arr) => {
//     return arr.reduce((a, b)=>a + b);
// }

// // Коллбэк для перемножения элементов массива

// let arrMul =(arr)=> { 
//     return arr.reduce((a, b)=>a * b);
// }

// // Функция с коллбэком

// let result = (arr, func)=> {
//     return func(arr);
// }
// console.log(result([10, 2, 3], arrSum)); //15
// console.log(result([10, 2, 3], arrMul)); //60

// //-----------------------------------------------------------------------------------

// console.log('');
// console.log('Задание 2');

// // Задание 2

// // Дан массив объектов:

// // const users = [
// // 	{name: 'Jon', age: 22},
// // 	{name: 'Richard', age: 18},
// // 	{name: 'Anton', age: 32},
// // 	{name: 'Lida', age: 23},
// // 	{name: 'Bob', age: 44}
// // ];
// // Необходимо отсортировать элементы массива в порядке увеличения возраста.

// const users = [
//     	{name: 'Jon', age: 22},
//     	{name: 'Richard', age: 18},
//     	{name: 'Anton', age: 32},
//     	{name: 'Lida', age: 23},
//     	{name: 'Bob', age: 44}
//     ];

// function sortedObj(obj, param){// кроме имени функции в параметры запишем и свойствa объекта

//     for (let i = 0; i < obj.length; i++){

//         for(let j=i; j < obj.length; j++){

//             if(obj[i][param] < obj[j][param]) continue;
            
//             let timeVar = obj[i];
//             obj[i] = obj[j];
//             obj[j] = timeVar;
//         }
//     }
// }

// sortedObj(users, 'age');//сортируем по возрасту (для сортировки по имени второй параметр заменить на 'name')
// console.log(users);

// // 0: {name: 'Richard', age: 18}
// // 1: {name: 'Jon', age: 22}
// // 2: {name: 'Lida', age: 23}
// // 3: {name: 'Anton', age: 32}
// // 4: {name: 'Bob', age: 44}

// //-----------------------------------------------------------------------------------

// console.log('');
// console.log('Задание 3');

// // Задание 3
// // Создайте функцию each, которая может производить любые манипуляции над переданным массивом
// // в зависимости от переданной callback-функции. Реализуйте несколько callback-функций,
// // которые будут делать следующее:

// // Переворачивать массив:
// // const arr = [1, '4', 9, 'two'];
// // each(arr, reversArr); // ['two', 9, '4', 1]

// // Преобразовывать все элементы к числу; если элемент получился NaN, то удалять его:
// // const arr1 = [1, '4', false, 9, 'two'];
// // each(arr1, toNumberArr); // [1, 4, 0, 9]

// const arr = [1, '4', 9, 'two'];
// const arr1 = [1, '4', false, 9, 'two'];

// // Коллбэк -переворот массива

// let reversArr = (arr)=> {
//     return arr.reverse();
// }

// // Коллбэк - уборка непреобразующихся в число элементов

// let toNumberArr = (arr)=> {

//   for (let i = 0; i < arr.length; i++){
//     arr[i] *= 1;                       //при умножении на 1 строковые и булевые величины преобразуются в число
//     if(isNaN(arr[i])) arr.splice(i, 1); //что осталось не числом вырезаем из массива
//   }

//   return arr;
// }

// // Функция с коллбэком

// let each = (anyArray,func)=> {
//     return func(anyArray);
// }

// console.log(each(arr, reversArr)); //['two', 9, '4', 1]
// console.log(each(arr1, toNumberArr)); //[1, 4, 0, 9]




// //-----------------------------------------------------------------------------------

// setTimeout(()=>{
//     console.log('');
//     console.log('Задание 4');
// },1001);

// // Задание 4
// // Напишите программу, которая на протяжении 30 секунд,
// // каждые 3 секунды, будет выводить в консоль текущую дату.
// // Последней строкой должно выводиться сообщение «30 секунд прошло».



// let timer = (time, interval)=> {       //функция принимает в качестве аргументов 
//                                        //время таймера и интервал между сообщениями в секундах.

//     let counter = Math.floor(time/interval);

//     let str= () => {
//         if(counter > 1) console.log(new Date);
//         else console.log(`${time} секунд прошло`); // В последней строке дату не выводим.
//                                                    // Идет оповещение об окончании интервала
//         counter--;
//     }

//     let timeId = setInterval(()=> str(), interval * 1000);

//     setTimeout(()=>clearInterval(timeId), time * 1000);
// }

// timer(30, 3);
// //-----------------------------------------------------------------------------------

// console.log('');
// console.log('Задание 5');

// // Задание 5
// // У нас есть код, имитирующий телефонный звонок:

// // function calling() {
// //     console.log('Звоню!')
// // };

// // function beeps() {
// //     setTimeout(() => {
// //         console.log('Идут гудки...')
// //     }, 1000);
// // }

// // function talk() {
// //     console.log('Разговор')
// // }

// // calling();
// // beeps();
// // talk();
// // Сейчас, если его запустить, последовательность будет 
// // 'Звоню!', 
// // 'Разговор', 
// // 'Идут гудки…' ,

// // но разговор всегда начинается после гудков, поэтому вам нужно исправить данный код так,
// // чтобы выводилась верная последовательность:

// // 'Звоню!',
// // 'Идут гудки…', 
// // 'Разговор'

// // Добавлять новые setTimout и setInterval нельзя, 
// // также нельзя удалять существующий setTimout,
// //  но можно менять код внутри его.

// function calling() {
//     console.log('Звоню!')
// };

// function beeps(callback) { // Изменение №1: В функцию beeps() добавлен 
//                            //   аргумент - функция callback */   
//     setTimeout(() => {
//         console.log('Идут гудки...');
//         callback();        // Изменение №2: Внесены изменения в коллбэк-функцию
//                            // метода setTimeout(). Добавлена строка вызова функции,
//                            // переданной аргументом в функцию beeps() */    

//     }, 1000);             
// }

// function talk() {
//     console.log('Разговор')
// }

// calling();
// beeps(talk);               // Изменение №3. При вызове фунции beeps() в скобках 
//                            // указываем аргумент(коллбэк-функция talk()   

// //talk();                  // Изменение №4: Функция talk() в данном коде теперь
//                            // реализуется внутри функции beeps() в качестве коллбэка. 
//                            // Необходимость ее самостоятельного вызова отпала. 

//-------------------------------------------------------------------------------------------------------------------------------
                           // person — это объект
// const person = {
//    // name, family, age — это свойства, или ключи, объекта person
//    name: 'Анатолий',
//    age: 29,
//    // Объекты могут быть вложенными, в ключе family лежит объект со свойствами mother, father и children
//    family: {
//       mother: 'Елена',
//       father: 'Антон',
//       // В ключах объекта могут лежать массивы, в ключе children лежат дети Анатолия
//       children: ['Варвара', 'Леонид']
//   } 
// };

// // Так мы получаем значение свойства объекта
// //console.log(person.name); // => Анатолий
// //console.log(person.family.father); // => Антон

// // Так мы можем изменить значение свойства в объекте
// //person.name = 'Иван'
// //console.log(person.name); // => Иван
// person['family']['children'].push('Сергей');

// // Так мы вызываем метод join у массива children
// //console.log(person.family.children.join(' и ')); // => Варвара и Леонид

// // Так мы подставляем значения в строку с помощью шаблонных строк
// //console.log('Имя: ${person.name}. Дети: ${person.family.children.join(' и ')}'); // => Имя: Иван. Дети: Варвара и Леонид
// console.log(person.family.children.join(' , '));